name: Link Branch to Issue
on:
  create:
    branches:
      - '*'

jobs:
  link-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 

      - name: Extract Issue Number
        uses: ./.github/actions/extract-issue  

      # - name: Assign Issue to the Branch Creator
      #   if: env.ISSUE_NUMBER != ''
      #   uses: ./.github/actions/assign-issue
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Link Branch to Issue
      #   if: env.ISSUE_NUMBER != ''
      #   uses: ./.github/actions/link-branch
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Latest Commit SHA
        id: fetch-sha
        run: |
          REPO="${{ github.repository }}"
          BRANCH_NAME="${{ github.ref_name }}"
          BRANCH_NAME_ENCODED=$(echo "${BRANCH_NAME}" | sed 's/#/%23/g')

          echo "üîç Fetching latest commit SHA for branch '$BRANCH_NAME'..."

          COMMIT_SHA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO/git/ref/heads/$BRANCH_NAME_ENCODED" | jq -r '.object.sha')

          if [[ "$COMMIT_SHA" == "null" || -z "$COMMIT_SHA" ]]; then
            echo "‚ùå Could not fetch commit SHA. Attempting alternative method..."

            # Alternative: Fetch all branch refs and filter
            COMMIT_SHA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/$REPO/git/refs/heads" | \
              jq -r ".[] | select(.ref == \"refs/heads/$BRANCH_NAME\") | .object.sha")

            if [[ "$COMMIT_SHA" == "null" || -z "$COMMIT_SHA" ]]; then
              echo "‚ùå Still could not fetch commit SHA. Exiting..."
              exit 1
            fi
          fi

          echo "‚úÖ Latest Commit SHA: $COMMIT_SHA"
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
          
      - name: Link Branch to Issue in Development Section
        if: env.ISSUE_NUMBER != ''
        run: |
          ISSUE_NUMBER=${{ env.ISSUE_NUMBER }}
          BRANCH_NAME="${{ github.ref_name }}"
          REPO="${{ github.repository }}"
          COMMIT_SHA="${{ env.COMMIT_SHA }}"

          echo "üîç Fetching Issue ID for Issue #$ISSUE_NUMBER..."
          
          # Fetch issue ID using GraphQL
          ISSUE_ID=$(curl -s -X POST -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"query { repository(owner: \\\"${REPO%/*}\\\", name: \\\"${REPO#*/}\\\") { issue(number: $ISSUE_NUMBER) { id } } }\"}" \
            https://api.github.com/graphql | jq -r '.data.repository.issue.id')

          if [[ "$ISSUE_ID" == "null" || -z "$ISSUE_ID" ]]; then
            echo "‚ùå Issue ID not found. Skipping..."
            exit 0
          fi

          echo "‚úÖ Issue ID: $ISSUE_ID"

          # Link Branch to Issue in Development Section
          echo "üîó Linking branch '$BRANCH_NAME' to Issue #$ISSUE_NUMBER..."
          RESPONSE=$(curl -s -X POST -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"mutation { createLinkedBranch(input: {issueId: \\\"$ISSUE_ID\\\", name: \\\"$BRANCH_NAME\\\", oid: \\\"$COMMIT_SHA\\\"}) { clientMutationId } }\"}" \
            https://api.github.com/graphql)

          echo "üìù Response: $RESPONSE"