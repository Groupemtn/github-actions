name: Move Issue to Project Status

description: Moves a GitHub issue into a specific status column in an organization-level ProjectV2.

inputs:
  github_token:
    description: "GitHub token with sufficient permissions (PAT recommended)"
    required: true
  org:
    description: "GitHub Organization name"
    required: true
  project_number:
    description: "Number of your GitHub Project"
    required: true
  status_name:
    description: "The status to move the issue into (e.g., In Progress)"
    required: true
  issue_number:
    description: "GitHub issue number"
    required: true

permissions:
  contents: read
  issues: write
  pull-requests: write

runs:
  using: "composite"
  steps:
    - name: Move Issue to Specified Status
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const issueNumber = parseInt('${{ inputs.issue_number }}');
          const projectNumber = parseInt('${{ inputs.project_number }}');
          const org = '${{ inputs.org }}';
          const targetStatus = '${{ inputs.status_name }}';
          const owner = context.repo.owner;
          const repo = context.repo.repo;

          const project = await github.graphql(`
            query($org: String!, $projectNumber: Int!) {
              organization(login: $org) {
                projectV2(number: $projectNumber) {
                  id
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options { id name }
                      }
                    }
                  }
                }
              }
            }
          `, { org, projectNumber });

          const projectId = project.organization.projectV2.id;
          const statusField = project.organization.projectV2.fields.nodes.find(f => f.name === "Status");
          const targetOption = statusField.options.find(opt => opt.name === targetStatus);

          const items = await github.graphql(`
            query($issueNumber: Int!, $owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issueNumber) {
                  id
                  projectItems(first: 10) {
                    nodes { id project { id } }
                  }
                }
              }
            }
          `, { issueNumber, owner, repo });

          const issue = items.repository.issue;
          if (!issue) {
            core.info('Issue not found');
            return;
          }

          let item = issue.projectItems.nodes.find(n => n.project.id === projectId);

          if (!item) {
            const addResp = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item { id }
                }
              }
            `, { projectId, contentId: issue.id });

            item = addResp.addProjectV2ItemById.item;
          }

          await github.graphql(`
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $fieldId,
                value: {singleSelectOptionId: $optionId}
              }) {
                projectV2Item { id }
              }
            }
          `, {
            projectId,
            itemId: item.id,
            fieldId: statusField.id,
            optionId: targetOption.id,
          });

          core.info(`Moved issue #${issueNumber} to "${targetStatus}".`);
